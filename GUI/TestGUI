import os
import sys
import csv
from PyQt5.QtWidgets import QApplication, QMainWindow, QFileDialog, QWidget, QTableWidgetItem,QRadioButton, QLabel
from PyQt5.QtWidgets import QTextEdit, QPushButton, QVBoxLayout, QHBoxLayout, QAction, qApp, QTableWidget


class PredoBreedCSV(QTableWidget):
    def __init__(self, r, c):
        super().__init__(r, c)

        self.init_ui()

    def init_ui(self):
        pass

    def open_sheet(self, path):
        if path[0] != '':
            with open(path[0], newline='') as csv_file:
                self.setRowCount(0)
                self.setColumnCount(3)
                my_file = csv.reader(csv_file, delimiter=';', quotechar='|')
                for row_data in my_file:
                    row = self.rowCount()
                    self.insertRow(row)
                    if len(row_data) > 3:
                        self.setColumnCount(len(row_data))
                    for column, stuff in enumerate(row_data):
                        item = QTableWidgetItem(stuff)
                        self.setItem(row, column, item)
        self.show()

class PredoBreedText(QWidget):
    def __init__(self):
        super().__init__()
        self.text = QTextEdit(self)
        self.sav_btn = QPushButton('Save')
        self.opn_btn = QPushButton('Open')
        self.init_ui()

    def init_ui(self):
        v_layout = QVBoxLayout()
        h_layout = QHBoxLayout()

        h_layout.addWidget(self.sav_btn)
        h_layout.addWidget(self.opn_btn)

        v_layout.addWidget(self.text)
        v_layout.addLayout(h_layout)

#        self.sav_btn.clicked.connect(self.file_widget.save_text)
        self.opn_btn.clicked.connect(self.open_text)

        self.setLayout(v_layout)

    def save_text(self):
        filename = QFileDialog.getSaveFileName(self, 'Save File', os.getenv('HOME'), '*.txt')
        with open(filename[0], 'w') as f:
            my_text = self.text.toPlainText()
            f.write(my_text)

    def open_text(self):
        path = QFileDialog.getOpenFileName(self, 'Open File', os.getenv('HOME'), '*.txt')
        with open(path[0], 'r') as f:
            file_text = f.read()
            self.text_widget.text.setText(file_text)

class PredoBreedFiles(QWidget):
    def __init__(self):
        super().__init__()

        self.text_widget = PredoBreedText()

        self.csv_widget = PredoBreedCSV(10, 10)

        self.init_ui()

    def init_ui(self):
        pass

    def new_text(self):
        pass

    def new_csv(self):
        pass

    def open_text(self):
        path = QFileDialog.getOpenFileName(self, 'Open File', os.getenv('HOME'))
        if path[0][-3:] == 'txt':
            with open(path[0], 'r') as f:
                file_text = f.read()
                self.text_widget.text.setText(file_text)
            self.text_widget.show()

        elif path[0][-3:] == 'csv':
            self.csv_widget.open_sheet(path)



class PredoBreedMain(QMainWindow):
    def __init__(self):
        super().__init__()

        self.file_widget = PredoBreedFiles()
        self.setCentralWidget(self.file_widget)


        self.init_ui()

    def init_ui(self):
        # Set a menubar
        bar = self.menuBar()

        # Append bars to Menu
        file = bar.addMenu('File')
        run = bar.addMenu('Run')
        info = bar.addMenu('Info')

        # Create Actions and Shortcuts
        # File Actions
        new_menu = file.addMenu('New')
        new_csv_action = QAction('CSV file', self)
        new_txt_action = QAction('TXT file', self)

        save_action = QAction('Save', self)
        save_action.setShortcut('Ctrl+S')

        open_action = QAction('&Open', self)

        quit_action = QAction('&Quit', self)


        # Run Actions


        # Info Actions
        how_to_action = QAction('Help', self)
        about_us_action = QAction('About us!', self)
        license_action = QAction('License', self)

        # Adding Actions into bars created
        # File Actions
        new_menu.addAction(new_csv_action)
        new_menu.addAction(new_txt_action)
        file.addAction(save_action)
        file.addAction(open_action)
        file.addAction(quit_action)

        # Run Actions


        # Info Actions
        info.addAction(how_to_action)
        info.addAction(license_action)
        info.addAction(about_us_action)

        # What Actions would do
        quit_action.triggered.connect(self.quit_trigger)
        file.triggered.connect(self.respond)

        self.setWindowTitle('PredoBreed')
        self.resize(600,400)

        self.show()

    def quit_trigger(self):
        qApp.quit()

    def respond(self, q):
        signal = q.text()

        if signal == 'CSV file':
            self.file_widget.clear_text()
        elif signal == 'TXT file':
            self.file_widget.clear_text()
        elif signal == '&Open':
            self.file_widget.open_text()
        elif signal == '&Save':
            self.file_widget.save_text()

if __name__ == '__main__':
    app = QApplication(sys.argv)
    writer = PredoBreedMain()
    sys.exit(app.exec_())
